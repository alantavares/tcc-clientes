# This workflow uses actions that are not certified by GitHub.
# São fornecidas por terceiros e regidas por
# termos de serviço, política de privacidade e suporte separados
# documentação.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: clientes-php-default           # set this to your Amazon ECR repository name
  ECR_WEBSERVER_REPOSITORY: clientes-nginx-default
  ECS_SERVICE: clientes-default                 # set this to your Amazon ECS service name
  ECS_CLUSTER: clientes-default                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION_NAME: clientes-default_app
  # ECS_TASK_DEFINITION: infra/ecs/task-definitions/api-task.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: clientes           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.HOST }}/clientes?serverVersion=8
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd app/
          docker build --build-arg APP_ENV=prod --build-arg APP_DEBUG=0 --build-arg INFRA_ENVIRONMENT=prod -f docker/php-fpm/Dockerfile --target prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -f docker/nginx/Dockerfile --build-arg API_HOST=localhost --build-arg API_PORT=9000 -t $ECR_REGISTRY/$ECR_WEBSERVER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_WEBSERVER_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image_webserver::$ECR_REGISTRY/$ECR_WEBSERVER_REPOSITORY:$IMAGE_TAG"

      - name: Updating application images
        id: task-def
        run: |
          sudo apt install awscli
          aws ecr get-login-password --region $AWS_REGION
          sudo curl https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy -o /bin/ecs-deploy
          sudo chmod +x /bin/ecs-deploy
          ecs-deploy --region $AWS_REGION --cluster arn:aws:ecs:$AWS_REGION:$AWS_ACCOUNT_ID:cluster/${ECS_CLUSTER} --task-definition ${ECS_TASK_DEFINITION_NAME} --image ${{ steps.build-image.outputs.image }} --timeout 600 --min 100 --max 200
          ecs-deploy --region $AWS_REGION --cluster arn:aws:ecs:$AWS_REGION:$AWS_ACCOUNT_ID:cluster/${ECS_CLUSTER} --service-name clientes-default --use-latest-task-def --image ${{ steps.build-image.outputs.image_webserver }} --timeout 600 --min 100 --max 200

      # - name: Updating webserver image on taskdef
      #   id: task-def-webserver
      #   uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image_webserver }}

      # - name: Updating application image on taskdef
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}
      
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
